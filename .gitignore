#Packages
library(dplyr)
library(tidyr)
library(ggplot2)
library(esquisse) #a package to simplify the use of ggplot
library(sf)
library(ggspatial)
library(factoextra)
library(cluster)
library(NbClust)
library(dbscan)

#load your file from the database make sure you've got this files
sPlot_traits <- read.csv("sPlot_traits.csv", header = TRUE, sep = ",", stringsAsFactors = FALSE)
sPlot_species_abundance <- read.csv("sPlot_species_abundance.csv", header = TRUE, sep = ",", stringsAsFactors = FALSE)
sPlot_header <- read.csv("sPlot_header.csv", header = TRUE, sep = ",", stringsAsFactors = FALSE)
sPlot_metadata <- read.csv("sPlot_metadata.csv", header = TRUE, sep = ",", stringsAsFactors = FALSE) 
traits_data <- read.csv("traits_data.csv") #traits data from BIEN database
data_fr_sp <- read.csv("data_fr_sp.csv") #Your file with your data traits (for us its data traits from woody plants in France and Spain)

#Data manipulation
sPlot_SA_GPS <- merge(sPlot_species_abundance, sPlot_header[, c("PlotObservationID", "Latitude", "Longitude")], by = "PlotObservationID") #just 
sPlot_SA_GPS$X = NULL
colnames(sPlot_traits)
colonnes_sPlot_traits <- c("PlotObservationID", "TraitCoverage_cover", "Species_richness", "TraitCoverage_pa",
                           "LeafArea_CWM", "StemDens_CWM", "SLA_CWM", "LeafC_perdrymass_CWM", "LeafN_CWM", 
                           "LeafP_CWM", "PlantHeight_CWM", "SeedMass_CWM", "Seed_length_CWM", "LDMC_CWM", 
                           "LeafNperArea_CWM", "LeafNPratio_CWM", "Leaf_delta_15N_CWM", "Seed_num_rep_unit_CWM",
                           "Leaffreshmass_CWM", "Stem_cond_dens_CWM", "Disp_unit_leng_CWM", "Wood_vessel_length_CWM",
                           "LeafArea_CWV", "StemDens_CWV", "SLA_CWV", "LeafC_perdrymass_CWV", "LeafN_CWV",
                           "LeafP_CWV", "PlantHeight_CWV", "SeedMass_CWV", "Seed_length_CWV", "LDMC_CWV", 
                           "LeafNperArea_CWV", "LeafNPratio_CWV", "Leaf_delta_15N_CWV", "Seed_num_rep_unit_CWV",
                           "Leaffreshmass_CWV", "Stem_cond_dens_CWV", "Disp_unit_leng_CWV", "Wood_vessel_length_CWV", "Latitude", "Longitude")
sPlot_SA_GPS_traits <- merge(sPlot_SA_GPS, sPlot_traits, by = "PlotObservationID")
sPlot_SA_Med <- sPlot_SA_GPS_traits %>% #med region
  filter(Latitude >= 30 & Latitude <= 44 &
           Longitude >= -12 & Longitude <= 40)

sPlot_traits_woodiness <- traits_data %>% #création d'un tableau avec les valeurs de traits et les epèces ligneuses
  select("scrubbed_species_binomial", "trait_name", "trait_value")%>%
  filter(trait_name == "whole plant woodiness") #on choisit la valeur de trait "whole plant woodiness" pour discriminer les espèces ligneuses des herbacées
sPlot_traits_woodiness <- sPlot_traits_woodiness %>%
  rename(Species = scrubbed_species_binomial)
sPlot_SA_Med_woodiness <- merge(sPlot_SA_Med, sPlot_traits_woodiness, by = "Species")
sPlot_woodiness <- sPlot_SA_Med_woodiness %>%
  filter(trait_value %in% c("woody")) #we filter in order to keep the "woody" plant
sPlot_woodiness_clean <- sPlot_woodiness %>% distinct(PlotObservationID, Species, Original_abundance, Latitude, Longitude, .keep_all = TRUE)
sPlot_woodiness_clean$Original_species=NULL
sPlot_woodiness_clean$Abundance_scale=NULL
sPlot_woodiness_clean$X=NULL #final dataframe
write.csv(sPlot_woodiness, "sPlot_woodiness.csv") #make sure you send this file in the right directory file

#Assessment of characterization rates of Mediterranean woody communities
species_vector <- unique(data_fr_sp$Species) #names of described species
sites_species_matrix_woodiness <- table(sPlot_woodiness_clean$PlotObservationID, sPlot_woodiness_clean$Species) #creation of a site-species matrix
described_species_matrix_woodiness <- sites_species_matrix_woodiness[, colnames(sites_species_matrix_woodiness) %in% species_vector] #creation of a matrix for described site-species (subsample)
total_species_sum_woodiness <- rowSums(sites_species_matrix_woodiness)
described_species_sum_woodiness <- rowSums(described_species_matrix_woodiness)
species_percentage_woodiness <- described_species_sum_woodiness / total_species_sum_woodiness * 100 #calculation of the percentage of described species in the communities
sPlot_woodiness_clean$Species_Percentage <- species_percentage_woodiness[match(sPlot_woodiness_clean$PlotObservationID, names(species_percentage_woodiness))]
sPlot_woodiness_clean$Species_Percentage
#species_med <- read.csv("species_frequency_woodiness_TCD.csv") #this file contains all the woody mediterranean plant interesting for our study
species_med <- species_med %>%
  select(all_species, total_occurrence, X.1) %>%
  rename(Species=all_species,
         commentary=X.1)
species_med_clean <- species_med %>%
  filter(is.na(commentary) | commentary == "")
sPlot_percent_woodiness <- sPlot_woodiness_clean %>% #Creation of a dataframe containing percentages and GPS coordinates (QGIS)
  select(Species, Latitude, Longitude, Species_Percentage) %>%
  mutate(
    Latitude = round(Latitude, 3),
    Longitude = round(Longitude, 3)
  ) %>%
  distinct() %>%
  filter(Species %in% species_med_clean$Species) %>%
  group_by(Latitude, Longitude) %>%
  summarise(
    count = n_distinct(Species), #counts unique species per group
    all_species = toString(unique(Species)), #concatenation
    Avg_Species_Percentage = mean(Species_Percentage, na.rm = TRUE) #Average Percentage
  )
#Map creation
sPlot_sf <- st_as_sf(sPlot_percent_woodiness, coords = c("Longitude", "Latitude"), crs = 4326)

ggplot(sPlot_sf) +
  annotation_map_tile(type = "osm", zoom = 0, alpha = 0.5) + # Adds a map background
  aes(colour = Avg_Species_Percentage) +
  geom_sf(size = 1.2) +
  scale_color_gradient(low = "#ECDEC0", high = "#D31212") +
  labs(colour = "%",
       title = "Evaluation of characterization rates of woody communities") + # Customizes the legend
  theme_minimal()

#Described species density
ggplot(sPlot_percent_woodiness) +
  aes(x = Avg_Species_Percentage) +
  geom_density(adjust = 0.7, fill = "#0F440F") +
  labs(
    x = "Percentage of described species within each community",
    y = "Density",
    title = "Density of the number of described species within each community (%)",
    subtitle = "Mediterranean Basin"
  ) +
  theme_light() +
  theme(
    plot.title = element_text(size = 16L,
                              face = "bold",
                              hjust = 0.5),
    axis.title.x = element_text(face = "italic"),
    axis.title.y = element_text(face = "italic")
  )
#species_percentage <- read.csv("sPlot_percent_woodiness.csv")
sPlot_separated <- species_percentage %>%
  separate_rows(all_species, sep = ",") %>%
  mutate(all_species = trimws(all_species)) 
species_frequency <- sPlot_separated %>%
  count(all_species, name = "total_occurrence") %>%
  arrange(desc(total_occurrence))
med_occurrence <- median(species_frequency$total_occurrence)
species_frequency$group <- ifelse(species_frequency$total_occurrence > med_occurrence, "High Occurrence", "Low Occurrence")
#You want to create your graph representing occurence by Species
ggplot(species_frequency) +
  aes(x = reorder(all_species, total_occurrence), y = total_occurrence, fill = total_occurrence) +
  geom_col() +
  coord_flip() +
  facet_wrap(~group, scales = "free_y") +
  scale_fill_gradient(low = "#b2c2bf", high = "#0F440F") + # Sage green to forest green
  labs(x = "Species", y = "Occurrence", title = "Occurrence by Species") +
  theme_light() +
  theme(axis.text.y = element_text(size = 10, angle = 0, hjust = 1),
        plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
        axis.title.y = element_text(face = "italic"),
        axis.title.x = element_text(face = "italic"))

# Load data from a CSV file
species_percentage <- read.csv("sPlot_percent_woodiness.csv")

# Separate the species listed in the 'all_species' column, trim whitespace
sPlot_separated <- species_percentage %>%
  tidyr::separate_rows(all_species, sep = ",") %>%
  dplyr::mutate(all_species = trimws(all_species))

# Count the frequency of each species and sort by frequency
species_frequency <- sPlot_separated %>%
  dplyr::count(all_species, name = "total_occurrence") %>%
  dplyr::arrange(desc(total_occurrence))

# Calculate the median occurrence for grouping
med_occurrence <- median(species_frequency$total_occurrence)

# Classify species into 'High Occurrence' or 'Low Occurrence' based on median
species_frequency$group <- ifelse(species_frequency$total_occurrence > med_occurrence, 
                                   "High Occurrence", "Low Occurrence")

# Plotting
ggplot(species_frequency) +
  aes(x = reorder(all_species, total_occurrence), y = total_occurrence, fill = total_occurrence) +
  geom_col() +
  coord_flip() +  # Flip coordinates for horizontal bars
  facet_wrap(~group, scales = "free_y") +  # Separate plots based on occurrence group
  scale_fill_gradient(low = "#b2c2bf", high = "#0F440F") +  # Sage green to forest green color gradient
  labs(x = "Species", y = "Occurrence", title = "Occurrence by Species") +  # Labels and title
  theme_light() +  # Light theme for the plot
  theme(axis.text.y = element_text(size = 10, angle = 0, hjust = 1),  # Custom theme settings
        plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
        axis.title.y = element_text(face = "italic"),
        axis.title.x = element_text(face = "italic"))

# Identify unique species from a dataset on species frequency
species_community <- unique(species_frequency$all_species)
# Filter data to include only species found in the species_community
community <- sPlot_woodiness_clean[sPlot_woodiness_clean$Species %in% species_community, ]

# Assign names to each community
community <- community %>%
  dplyr::select(Species, PlotObservationID, Original_abundance, Relative_cover, TraitCoverage_cover, Species_richness, Species_Percentage, Latitude, Longitude) %>%
  group_by(Latitude, Longitude, PlotObservationID) %>%
  mutate(Community_Name = paste0("community_", cur_group_id())) %>%
  ungroup()

# Summary of communities
community_summary <- community %>%
  group_by(Community_Name) %>%
  summarise(
    Number_of_Species = n_distinct(Species),
    Average_Abundance = mean(Original_abundance, na.rm = TRUE),
    Average_Relative_Cover = mean(Relative_cover, na.rm = TRUE),
    Average_Species_Richness = mean(Species_richness, na.rm = TRUE),
    Average_Species_Percentage = mean(Species_Percentage, na.rm = TRUE)
  )

# Species by communities
species_in_community <- community %>%
  dplyr::select(Community_Name, Species, Original_abundance, Relative_cover) %>%
  arrange(Community_Name, Species)

# Redefine communities based on habitat + abiotic conditions
selected_columns <- c("PlotObservationID", "Latitude", "Longitude", "Grassland", "Forest", "Shrubland", "Wetland", "SoilClim_PC1", "SoilClim_PC2") # Principal components PC1 + PC2 for soil and climate
sPlot_header_selected <- sPlot_header[, selected_columns]
community_environment <- merge(community, sPlot_header_selected, by = c("PlotObservationID", "Latitude", "Longitude"))
community_environment <- na.omit(community_environment)

# Community data with community names
community_name <- community_environment %>%
  group_by(Latitude, Longitude) %>%
  summarise(Species = list(Species),
            Abundance = list(Original_abundance),
            Grassland = first(Grassland), 
            Forest = first(Forest),
            Shrubland = first(Shrubland),
            Wetland = first(Wetland),
            SoilClim_PC1 = first(SoilClim_PC1),
            SoilClim_PC2 = first(SoilClim_PC2),
            .groups = 'drop') %>%
  rowwise() %>%
  mutate(Ranked_Species = list(Species[order(-unlist(Abundance))][1:min(2, length(Species))])) %>%
  ungroup() %>%
  mutate(Community_Name = sapply(Ranked_Species, function(x) paste(x, collapse=" "))) %>%
  dplyr::select(-Species, -Abundance, -Ranked_Species)

# Creates a scatter plot showing the relationship between average abundance per species and the number of species
ggplot(community_summary, aes(x = Average_Abundance, y = Number_of_Species)) +
  # Adds points to the plot, coloring them based on average species richness, with partial transparency and a specified size
  geom_point(aes(color = Average_Species_Richness), alpha = 0.6, size = 3) +
  # Adds a smoothed line (loess) to illustrate the trend, with standard error shown in red
  geom_smooth(method = "loess", formula = y ~ x, se = TRUE, color = "red", linewidth = 1) +
  # Applies a color scale with the viridis palette, naming the legend "Average Species Richness"
  scale_color_viridis_c(name = "Average Species Richness", option = "H") +
  # Sets labels for axes and the title
  labs(x = "Average Abundance per Species", y = "Number of Species",
       title = "Species Abundance Distribution") +
  # Uses a light theme for the plot
  theme_light() +
  # Customizes text and title appearance
  theme(axis.text.y = element_text(size = 10, angle = 0, hjust = 1),
        plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
        axis.title.y = element_text(face = "italic"),
        axis.title.x = element_text(face = "italic")) + 
  # Positions the legend at the bottom
  theme(legend.position = "bottom")

# Similar to the first snippet but adds log10 scales for both axes
ggplot(community_summary, aes(x = Average_Abundance, y = Number_of_Species)) +
  geom_point(aes(color = Average_Species_Richness), alpha = 0.6, size = 3) +
  geom_smooth(method = "loess", formula = y ~ x, se = TRUE, color = "red", linewidth = 1) +
  # Applies a logarithmic transformation to the x-axis and sets its limits
  scale_x_log10(name = "Average Abundance per Species (log)", limits = c(1, NA)) +
  # Applies a logarithmic transformation to the y-axis and sets its limits
  scale_y_log10(name = "Number of Species (log)", limits = c(1, NA)) +
  # The color scale and labels are the same as the first snippet
  scale_color_viridis_c(name = "Average Species Richness", option = "H") +
  labs(x = "Average Abundance per Species", y = "Number of Species",
       title = "Species Abundance Distribution") +
  theme_light() +
  theme(axis.text.y = element_text(size = 10, angle = 0, hjust = 1),
        plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
        axis.title.y = element_text(face = "italic"),
        axis.title.x = element_text(face = "italic")) +
  theme(legend.position = "bottom")

# Filter the data to select only the necessary columns and then group by PlotObservationID
filtered_data <- community_environment %>%
  dplyr::select(PlotObservationID, Species, Original_abundance) %>%
  group_by(PlotObservationID)

# Create a community matrix using the xtabs function, crossing original abundance with Plot IDs and Species
community_matrix <- xtabs(Original_abundance ~ PlotObservationID + Species, data = filtered_data)

# Calculate Shannon diversity index for the community matrix
shannon_diversity <- diversity(community_matrix, index = "shannon")

# Create a data frame from the Shannon diversity indices
shannon_df <- data.frame(PlotObservationID = names(shannon_diversity), a_diversity = shannon_diversity)

# Convert PlotObservationID to numeric
shannon_df$PlotObservationID <- as.numeric(shannon_df$PlotObservationID)

# Join the Shannon diversity data frame back to the main community environment dataset
community_environment <- community_environment %>%
  left_join(shannon_df, by = "PlotObservationID")

# Join the Shannon diversity data frame with a subset of community_index_percentage_species to get community IDs
alpha_diversity <- shannon_df %>%
  left_join(dplyr::select(community_index_percentage_species, PlotObservationID, Community_ID), 
            by = "PlotObservationID")

# Remove duplicate rows to have unique alpha diversity values
alpha_diversity_unique <- alpha_diversity %>% distinct()

# Calculate the mean alpha diversity per community ID
shannon_per_community <- alpha_diversity %>%
  group_by(Community_ID) %>%
  summarise(Mean_a_diversity = mean(a_diversity, na.rm = TRUE))

# Merge the mean alpha diversity per community with the community mean dataset
diversity_info <- merge(shannon_per_community, community_mean, by = "Community_ID")

# Convert Community_ID to a factor for plotting purposes
diversity_info$Community_ID <- factor(diversity_info$Community_ID)

# Plot the mean alpha diversity per community using ggplot2
ggplot(diversity_info) +
 aes(x = Community_ID, y = Mean_a_diversity, fill = Mean_Species_richness) +
 geom_col() +
 scale_fill_distiller(palette = "RdYlGn", direction = 1) +
 labs(x = "Community Identifier", 
 y = "Alpha Diversity (Shannon Index)", fill = "Species Richness") +
 theme_minimal() +
 theme(plot.title = element_text(size = 15L, 
 face = "bold", hjust = 0.5), axis.title.y = element_text(size = 10L), axis.title.x = element_text(size = 10L))
